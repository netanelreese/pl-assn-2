Nonterminals useless in grammar

    else_stmt
    a_expr
    a_term
    a_fact
    oprel


Terminals unused in grammar

    T_ID
    T_NUM
    T_ADD
    T_SUB
    T_MUL
    T_DIV
    T_LT
    T_GT
    T_LEQ
    T_GEQ
    T_EQ
    T_NEQ
    T_REPEAT
    T_UNTIL
    T_WHILE
    T_IF
    T_THEN
    T_ELSE
    T_DECLARE
    T_INTEGER
    T_FLOAT
    T_LITERAL_STR


Rules useless in grammar

   33 else_stmt: %empty
   34          | %empty

   35 a_expr: a_expr T_ADD a_term
   36       | a_expr T_SUB a_term
   37       | a_term

   38 a_term: a_term T_MUL a_fact
   39       | a_term T_DIV a_fact
   40       | a_fact

   41 a_fact: %empty
   42       | %empty
   43       | %empty
   44       | %empty
   45       | %empty

   46 oprel: T_LT
   47      | T_GT
   48      | T_LEQ
   49      | T_GEQ
   50      | T_EQ
   51      | T_NEQ


Rules useless in parser due to conflicts

   15 repeat: %empty

   16 if_stmt: %empty

   19 varref: %empty

   25 l_fact: %empty
   26       | %empty

   30 varlist: %empty

   32 expr_list: %empty


State 0 conflicts: 3 reduce/reduce
State 1 conflicts: 2 reduce/reduce
State 2 conflicts: 2 reduce/reduce
State 3 conflicts: 5 reduce/reduce
State 22 conflicts: 3 reduce/reduce
State 23 conflicts: 8 reduce/reduce
State 25 conflicts: 5 reduce/reduce
State 32 conflicts: 8 reduce/reduce
State 33 conflicts: 8 reduce/reduce
State 34 conflicts: 5 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmt_list ';'

    2 stmt_list: stmt_list ';' stmt
    3          | stmt

    4 stmt: assignment
    5     | read
    6     | write
    7     | while
    8     | repeat
    9     | block
   10     | foreach
   11     | if_stmt

   12 block: T_BEGIN stmt_list T_END

   13 foreach: T_FOREACH T_IN '(' ':' ')' stmt

   14 while: %empty

   15 repeat: %empty

   16 if_stmt: %empty

   17 assignment: varref T_ASSIGN l_expr

   18 varref: %empty
   19       | %empty

   20 l_expr: l_expr T_AND l_term
   21       | l_term

   22 l_term: l_term T_OR l_fact
   23       | l_fact

   24 l_fact: %empty
   25       | %empty
   26       | %empty

   27 read: T_READ varlist

   28 write: T_WRITE expr_list

   29 varlist: %empty
   30        | %empty

   31 expr_list: %empty
   32          | %empty


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 13
    ')' (41) 13
    ':' (58) 13
    ';' (59) 1 2
    error (256)
    T_ID (258)
    T_NUM (259)
    T_ADD (260)
    T_SUB (261)
    T_MUL (262)
    T_DIV (263)
    T_LT (264)
    T_GT (265)
    T_LEQ (266)
    T_GEQ (267)
    T_EQ (268)
    T_NEQ (269)
    T_AND (270) 20
    T_OR (271) 22
    T_READ (272) 27
    T_WRITE (273) 28
    T_ASSIGN (274) 17
    T_BEGIN (275) 12
    T_END (276) 12
    T_FOREACH (277) 13
    T_IN (278) 13
    T_REPEAT (279)
    T_UNTIL (280)
    T_WHILE (281)
    T_IF (282)
    T_THEN (283)
    T_ELSE (284)
    T_DECLARE (285)
    T_INTEGER (286)
    T_FLOAT (287)
    T_LITERAL_STR (288)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program (39)
        on left: 1
        on right: 0
    stmt_list (40)
        on left: 2 3
        on right: 1 2 12
    stmt (41)
        on left: 4 5 6 7 8 9 10 11
        on right: 2 3 13
    block (42)
        on left: 12
        on right: 9
    foreach (43)
        on left: 13
        on right: 10
    while (44)
        on left: 14
        on right: 7
    repeat (45)
        on left: 15
        on right: 8
    if_stmt (46)
        on left: 16
        on right: 11
    assignment (47)
        on left: 17
        on right: 4
    varref (48)
        on left: 18 19
        on right: 17
    l_expr (49)
        on left: 20 21
        on right: 17 20
    l_term (50)
        on left: 22 23
        on right: 20 21 22
    l_fact (51)
        on left: 24 25 26
        on right: 22 23
    read (52)
        on left: 27
        on right: 5
    write (53)
        on left: 28
        on right: 6
    varlist (54)
        on left: 29 30
        on right: 27
    expr_list (55)
        on left: 31 32
        on right: 28


State 0

    0 $accept: • program $end

    T_READ     shift, and go to state 1
    T_WRITE    shift, and go to state 2
    T_BEGIN    shift, and go to state 3
    T_FOREACH  shift, and go to state 4

    T_ASSIGN  reduce using rule 18 (varref)
    T_ASSIGN  [reduce using rule 19 (varref)]
    ';'       reduce using rule 14 (while)
    ';'       [reduce using rule 15 (repeat)]
    ';'       [reduce using rule 16 (if_stmt)]
    $default  reduce using rule 14 (while)

    program     go to state 5
    stmt_list   go to state 6
    stmt        go to state 7
    block       go to state 8
    foreach     go to state 9
    while       go to state 10
    repeat      go to state 11
    if_stmt     go to state 12
    assignment  go to state 13
    varref      go to state 14
    read        go to state 15
    write       go to state 16


State 1

   27 read: T_READ • varlist

    T_END     reduce using rule 29 (varlist)
    T_END     [reduce using rule 30 (varlist)]
    ';'       reduce using rule 29 (varlist)
    ';'       [reduce using rule 30 (varlist)]
    $default  reduce using rule 29 (varlist)

    varlist  go to state 17


State 2

   28 write: T_WRITE • expr_list

    T_END     reduce using rule 31 (expr_list)
    T_END     [reduce using rule 32 (expr_list)]
    ';'       reduce using rule 31 (expr_list)
    ';'       [reduce using rule 32 (expr_list)]
    $default  reduce using rule 31 (expr_list)

    expr_list  go to state 18


State 3

   12 block: T_BEGIN • stmt_list T_END

    T_READ     shift, and go to state 1
    T_WRITE    shift, and go to state 2
    T_BEGIN    shift, and go to state 3
    T_FOREACH  shift, and go to state 4

    T_ASSIGN  reduce using rule 18 (varref)
    T_ASSIGN  [reduce using rule 19 (varref)]
    T_END     reduce using rule 14 (while)
    T_END     [reduce using rule 15 (repeat)]
    T_END     [reduce using rule 16 (if_stmt)]
    ';'       reduce using rule 14 (while)
    ';'       [reduce using rule 15 (repeat)]
    ';'       [reduce using rule 16 (if_stmt)]
    $default  reduce using rule 14 (while)

    stmt_list   go to state 19
    stmt        go to state 7
    block       go to state 8
    foreach     go to state 9
    while       go to state 10
    repeat      go to state 11
    if_stmt     go to state 12
    assignment  go to state 13
    varref      go to state 14
    read        go to state 15
    write       go to state 16


State 4

   13 foreach: T_FOREACH • T_IN '(' ':' ')' stmt

    T_IN  shift, and go to state 20


State 5

    0 $accept: program • $end

    $end  shift, and go to state 21


State 6

    1 program: stmt_list • ';'
    2 stmt_list: stmt_list • ';' stmt

    ';'  shift, and go to state 22


State 7

    3 stmt_list: stmt •

    $default  reduce using rule 3 (stmt_list)


State 8

    9 stmt: block •

    $default  reduce using rule 9 (stmt)


State 9

   10 stmt: foreach •

    $default  reduce using rule 10 (stmt)


State 10

    7 stmt: while •

    $default  reduce using rule 7 (stmt)


State 11

    8 stmt: repeat •

    $default  reduce using rule 8 (stmt)


State 12

   11 stmt: if_stmt •

    $default  reduce using rule 11 (stmt)


State 13

    4 stmt: assignment •

    $default  reduce using rule 4 (stmt)


State 14

   17 assignment: varref • T_ASSIGN l_expr

    T_ASSIGN  shift, and go to state 23


State 15

    5 stmt: read •

    $default  reduce using rule 5 (stmt)


State 16

    6 stmt: write •

    $default  reduce using rule 6 (stmt)


State 17

   27 read: T_READ varlist •

    $default  reduce using rule 27 (read)


State 18

   28 write: T_WRITE expr_list •

    $default  reduce using rule 28 (write)


State 19

    2 stmt_list: stmt_list • ';' stmt
   12 block: T_BEGIN stmt_list • T_END

    T_END  shift, and go to state 24
    ';'    shift, and go to state 25


State 20

   13 foreach: T_FOREACH T_IN • '(' ':' ')' stmt

    '('  shift, and go to state 26


State 21

    0 $accept: program $end •

    $default  accept


State 22

    1 program: stmt_list ';' •
    2 stmt_list: stmt_list ';' • stmt

    T_READ     shift, and go to state 1
    T_WRITE    shift, and go to state 2
    T_BEGIN    shift, and go to state 3
    T_FOREACH  shift, and go to state 4

    T_ASSIGN  reduce using rule 18 (varref)
    T_ASSIGN  [reduce using rule 19 (varref)]
    ';'       reduce using rule 14 (while)
    ';'       [reduce using rule 15 (repeat)]
    ';'       [reduce using rule 16 (if_stmt)]
    $default  reduce using rule 1 (program)

    stmt        go to state 27
    block       go to state 8
    foreach     go to state 9
    while       go to state 10
    repeat      go to state 11
    if_stmt     go to state 12
    assignment  go to state 13
    varref      go to state 14
    read        go to state 15
    write       go to state 16


State 23

   17 assignment: varref T_ASSIGN • l_expr

    T_AND     reduce using rule 24 (l_fact)
    T_AND     [reduce using rule 25 (l_fact)]
    T_AND     [reduce using rule 26 (l_fact)]
    T_OR      reduce using rule 24 (l_fact)
    T_OR      [reduce using rule 25 (l_fact)]
    T_OR      [reduce using rule 26 (l_fact)]
    T_END     reduce using rule 24 (l_fact)
    T_END     [reduce using rule 25 (l_fact)]
    T_END     [reduce using rule 26 (l_fact)]
    ';'       reduce using rule 24 (l_fact)
    ';'       [reduce using rule 25 (l_fact)]
    ';'       [reduce using rule 26 (l_fact)]
    $default  reduce using rule 24 (l_fact)

    l_expr  go to state 28
    l_term  go to state 29
    l_fact  go to state 30


State 24

   12 block: T_BEGIN stmt_list T_END •

    $default  reduce using rule 12 (block)


State 25

    2 stmt_list: stmt_list ';' • stmt

    T_READ     shift, and go to state 1
    T_WRITE    shift, and go to state 2
    T_BEGIN    shift, and go to state 3
    T_FOREACH  shift, and go to state 4

    T_ASSIGN  reduce using rule 18 (varref)
    T_ASSIGN  [reduce using rule 19 (varref)]
    T_END     reduce using rule 14 (while)
    T_END     [reduce using rule 15 (repeat)]
    T_END     [reduce using rule 16 (if_stmt)]
    ';'       reduce using rule 14 (while)
    ';'       [reduce using rule 15 (repeat)]
    ';'       [reduce using rule 16 (if_stmt)]
    $default  reduce using rule 14 (while)

    stmt        go to state 27
    block       go to state 8
    foreach     go to state 9
    while       go to state 10
    repeat      go to state 11
    if_stmt     go to state 12
    assignment  go to state 13
    varref      go to state 14
    read        go to state 15
    write       go to state 16


State 26

   13 foreach: T_FOREACH T_IN '(' • ':' ')' stmt

    ':'  shift, and go to state 31


State 27

    2 stmt_list: stmt_list ';' stmt •

    $default  reduce using rule 2 (stmt_list)


State 28

   17 assignment: varref T_ASSIGN l_expr •
   20 l_expr: l_expr • T_AND l_term

    T_AND  shift, and go to state 32

    $default  reduce using rule 17 (assignment)


State 29

   21 l_expr: l_term •
   22 l_term: l_term • T_OR l_fact

    T_OR  shift, and go to state 33

    $default  reduce using rule 21 (l_expr)


State 30

   23 l_term: l_fact •

    $default  reduce using rule 23 (l_term)


State 31

   13 foreach: T_FOREACH T_IN '(' ':' • ')' stmt

    ')'  shift, and go to state 34


State 32

   20 l_expr: l_expr T_AND • l_term

    T_AND     reduce using rule 24 (l_fact)
    T_AND     [reduce using rule 25 (l_fact)]
    T_AND     [reduce using rule 26 (l_fact)]
    T_OR      reduce using rule 24 (l_fact)
    T_OR      [reduce using rule 25 (l_fact)]
    T_OR      [reduce using rule 26 (l_fact)]
    T_END     reduce using rule 24 (l_fact)
    T_END     [reduce using rule 25 (l_fact)]
    T_END     [reduce using rule 26 (l_fact)]
    ';'       reduce using rule 24 (l_fact)
    ';'       [reduce using rule 25 (l_fact)]
    ';'       [reduce using rule 26 (l_fact)]
    $default  reduce using rule 24 (l_fact)

    l_term  go to state 35
    l_fact  go to state 30


State 33

   22 l_term: l_term T_OR • l_fact

    T_AND     reduce using rule 24 (l_fact)
    T_AND     [reduce using rule 25 (l_fact)]
    T_AND     [reduce using rule 26 (l_fact)]
    T_OR      reduce using rule 24 (l_fact)
    T_OR      [reduce using rule 25 (l_fact)]
    T_OR      [reduce using rule 26 (l_fact)]
    T_END     reduce using rule 24 (l_fact)
    T_END     [reduce using rule 25 (l_fact)]
    T_END     [reduce using rule 26 (l_fact)]
    ';'       reduce using rule 24 (l_fact)
    ';'       [reduce using rule 25 (l_fact)]
    ';'       [reduce using rule 26 (l_fact)]
    $default  reduce using rule 24 (l_fact)

    l_fact  go to state 36


State 34

   13 foreach: T_FOREACH T_IN '(' ':' ')' • stmt

    T_READ     shift, and go to state 1
    T_WRITE    shift, and go to state 2
    T_BEGIN    shift, and go to state 3
    T_FOREACH  shift, and go to state 4

    T_ASSIGN  reduce using rule 18 (varref)
    T_ASSIGN  [reduce using rule 19 (varref)]
    T_END     reduce using rule 14 (while)
    T_END     [reduce using rule 15 (repeat)]
    T_END     [reduce using rule 16 (if_stmt)]
    ';'       reduce using rule 14 (while)
    ';'       [reduce using rule 15 (repeat)]
    ';'       [reduce using rule 16 (if_stmt)]
    $default  reduce using rule 14 (while)

    stmt        go to state 37
    block       go to state 8
    foreach     go to state 9
    while       go to state 10
    repeat      go to state 11
    if_stmt     go to state 12
    assignment  go to state 13
    varref      go to state 14
    read        go to state 15
    write       go to state 16


State 35

   20 l_expr: l_expr T_AND l_term •
   22 l_term: l_term • T_OR l_fact

    T_OR  shift, and go to state 33

    $default  reduce using rule 20 (l_expr)


State 36

   22 l_term: l_term T_OR l_fact •

    $default  reduce using rule 22 (l_term)


State 37

   13 foreach: T_FOREACH T_IN '(' ':' ')' stmt •

    $default  reduce using rule 13 (foreach)
